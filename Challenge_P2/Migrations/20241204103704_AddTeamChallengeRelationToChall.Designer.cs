// <auto-generated />
using System;
using Challenge_P2.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Challenge_P2.Migrations
{
    [DbContext(typeof(ChallengeDBContext))]
    [Migration("20241204103704_AddTeamChallengeRelationToChall")]
    partial class AddTeamChallengeRelationToChall
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Challenge_Classe.Chall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuideUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageB64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Phishing",
                            CreatedAt = new DateTime(2024, 12, 4, 11, 37, 4, 235, DateTimeKind.Local).AddTicks(5206),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque pulvinar massa faucibus malesuada pharetra. Praesent malesuada magna at mi rutrum fringilla. Nam ut risus et erat consectetur convallis. Nunc consectetur nisi turpis, ac molestie urna cursus ut. Pellentesque efficitur id odio eget tristique. Vestibulum mi diam, maximus sed libero vel, varius sagittis eros. Mauris vestibulum lorem nec libero faucibus laoreet. Nulla magna odio, malesuada vel volutpat sollicitudin, rhoncus sit amet neque. Suspendisse convallis tellus porttitor congue luctus. Proin tempus dui facilisis est auctor, vel viverra urna eleifend. Vivamus ac dui a nisl porta vestibulum. Pellentesque justo ante, pellentesque vel sapien ac, mollis rhoncus leo.",
                            DifficultyLevel = "1",
                            GuideUrl = "https://google.com",
                            ImageB64 = "",
                            Points = 15,
                            Title = "Mail me"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdType");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdType = 1,
                            Text = "Phishing involves attempting to acquire sensitive information by pretending to be a trustworthy entity.",
                            Title = "What is Phishing?"
                        },
                        new
                        {
                            Id = 2,
                            IdType = 1,
                            Text = "A brute force attack attempts to gain access to accounts by trying all possible combinations of passwords.",
                            Title = "What is a Brute Force Attack?"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Relation.ChallengeQuestion", b =>
                {
                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ChallengeId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChallengeQuestions");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            QuestionId = 1
                        },
                        new
                        {
                            ChallengeId = 1,
                            QuestionId = 2
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Relation.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            Text = "A type of cybersecurity attack"
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            Text = "A method to encrypt files"
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = true,
                            QuestionId = 2,
                            Text = "An attack involving guessing passwords"
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = false,
                            QuestionId = 2,
                            Text = "A method to increase system performance"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Relation.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Multiple Choice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "True/False"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Single Choice"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Relation.TeamChallenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamChallenges");
                });

            modelBuilder.Entity("Challenge_Classe.Relation.UserTeam", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Challenge_Classe.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfda1219-7276-455d-8aaa-42b57945e92c"),
                            Name = "Default Team"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Utilisateurs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9e14cd0-8be1-43ce-ac0c-0233691d5006"),
                            CreatedAt = new DateTime(2024, 12, 4, 11, 37, 3, 663, DateTimeKind.Local).AddTicks(6283),
                            Email = "Jean@gmail.com",
                            Password = "$2a$12$8p.dPkv8LMtEYdTZ4f7XHOI/c3iQ/tdlYowPc9JDVWfbFZyvXzHRe",
                            ProfilePicture = "https://pixabay.com/vectors/blank-profile-picture-mystery-man-973460/",
                            RoleId = 1,
                            Username = "Jean"
                        },
                        new
                        {
                            Id = new Guid("43634094-a6e8-4c6e-8bef-5e2c44c14013"),
                            CreatedAt = new DateTime(2024, 12, 4, 11, 37, 4, 231, DateTimeKind.Local).AddTicks(2994),
                            Email = "Pierre@gmail.com",
                            Password = "$2a$12$ZzctyUVnJ/i32vZJIwBM0eRMOxV6U60nyzO2jO7kV426p3xjnWqpq",
                            ProfilePicture = "https://pixabay.com/vectors/blank-profile-picture",
                            RoleId = 1,
                            Username = "Pierre"
                        });
                });

            modelBuilder.Entity("Challenge_Classe.Question", b =>
                {
                    b.HasOne("Challenge_Classe.Relation.QuestionType", "Type")
                        .WithMany()
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Challenge_Classe.Relation.ChallengeQuestion", b =>
                {
                    b.HasOne("Challenge_Classe.Chall", "Challenge")
                        .WithMany("ChallengeQuestions")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge_Classe.Question", "Question")
                        .WithMany("ChallengeQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Challenge_Classe.Relation.QuestionOption", b =>
                {
                    b.HasOne("Challenge_Classe.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Challenge_Classe.Relation.TeamChallenge", b =>
                {
                    b.HasOne("Challenge_Classe.Chall", "Challenge")
                        .WithMany("TeamChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge_Classe.Team", "Team")
                        .WithMany("TeamChallenges")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Challenge_Classe.Relation.UserTeam", b =>
                {
                    b.HasOne("Challenge_Classe.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge_Classe.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Challenge_Classe.User", b =>
                {
                    b.HasOne("Challenge_Classe.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Challenge_Classe.Chall", b =>
                {
                    b.Navigation("ChallengeQuestions");

                    b.Navigation("TeamChallenges");
                });

            modelBuilder.Entity("Challenge_Classe.Question", b =>
                {
                    b.Navigation("ChallengeQuestions");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("Challenge_Classe.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Challenge_Classe.Team", b =>
                {
                    b.Navigation("TeamChallenges");

                    b.Navigation("UserTeams");
                });

            modelBuilder.Entity("Challenge_Classe.User", b =>
                {
                    b.Navigation("UserTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
